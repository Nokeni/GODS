basePath: /api
definitions:
  gin.H:
    additionalProperties: {}
    type: object
  github_com_Nokeni_GODS_internal_web_api_models.Group:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        description: Description is the group's description
        type: string
      id:
        type: integer
      name:
        description: Name is the group's name
        type: string
      updatedAt:
        type: string
      users:
        description: Users is the list of users that belongs to the group
        items:
          $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.User'
        type: array
    type: object
  github_com_Nokeni_GODS_internal_web_api_models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        description: Email is the user's email.
        type: string
      groups:
        description: Groups is the list of groups the user belongs to.
        items:
          $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.Group'
        type: array
      id:
        type: integer
      name:
        description: Name is the user's name.
        type: string
      password:
        description: Password is the user's password.
        type: string
      updatedAt:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: GODS, for gods.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GODS API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - multipart/form-data
      description: Authenticate a user with their username and password
      parameters:
      - description: Username
        in: formData
        name: name
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
      summary: Authenticate a user
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - multipart/form-data
      description: Register a new user with username, password, and email
      parameters:
      - description: Username
        in: formData
        name: name
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Password confirmation
        in: formData
        name: password_confirmation
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new user
      tags:
      - auth
  /groups:
    get:
      description: Get a list of all groups in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.Group'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get all groups
      tags:
      - groups
    post:
      consumes:
      - multipart/form-data
      description: Create a new group in the system
      parameters:
      - description: Group name
        in: formData
        name: name
        required: true
        type: string
      - description: Group description
        in: formData
        name: description
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.Group'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Create a new group
      tags:
      - groups
  /groups/{id}:
    delete:
      description: Remove a group from the system
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Delete a group
      tags:
      - groups
    get:
      description: Get details of a group by its ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.Group'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get a group by ID
      tags:
      - groups
    put:
      consumes:
      - multipart/form-data
      description: Update an existing group in the system
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Group name
        in: formData
        name: name
        type: string
      - description: Group description
        in: formData
        name: description
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.Group'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Update an existing group
      tags:
      - groups
  /users:
    get:
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - multipart/form-data
      description: Create a new user with the provided details
      parameters:
      - description: Username
        in: formData
        name: name
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Password confirmation
        in: formData
        name: password_confirmation
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /users-groups/{groupId}/users:
    get:
      description: Get a list of all users that belong to a group by its ID
      parameters:
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.User'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get all users for a group
      tags:
      - user_group
  /users-groups/{groupId}/users/{userId}:
    delete:
      description: Remove a user from a specified group by their IDs
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Remove a user from a group
      tags:
      - user_group
    post:
      description: Add a user to a specified group by their IDs
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Group ID
        in: path
        name: groupId
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Add a user to a group
      tags:
      - user_group
  /users-groups/users/{userId}:
    get:
      description: Get a list of all groups that a user belongs to by their ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.Group'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get all groups for a user
      tags:
      - user_group
  /users/{id}:
    delete:
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Delete a user by ID
      tags:
      - users
    get:
      description: Get details of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - multipart/form-data
      description: Update the details of an existing user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Username
        in: formData
        name: name
        type: string
      - description: Email
        in: formData
        name: email
        type: string
      - description: Password
        in: formData
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_Nokeni_GODS_internal_web_api_models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Update an existing user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
